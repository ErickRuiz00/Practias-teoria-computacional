#include <bits/stdc++.h>

using namespace std;

// Function protoytpes
set<string> readAlphabet(int, set<string>);
string validateString(const set<string>&);
template <class T>
void printSet(const T&);
bool isPrefixOf(string, string);
bool isSuffixOf(string, string);
bool isSubstringOf(string, string);
bool isSubsequenceOf(string, string);
string createNewWord(int, const set<string>&);
set<string> createNewLanguage(const set<string>&);
set<string> differenceBetween(const set<string>&, const set<string>&);
vector<string> alphabetPow(const set<string>&);
bool regularExpresion(string);

int main(){
  // set<string> alphabet;
  // string w1, w2;
  // int option;

  // cout << "Choose an option to insert a new Alphabet\n";
  
  // // Request the alphabet to the user
  // do{
  //   cout << "1. Insert one by one\n";
  //   cout << "2. Insert in range form\n";
  //   cin >> option; 
  //   alphabet = readAlphabet(option, alphabet);
  //   if (alphabet.size() < 3)
  //     cout << "\nNot enough symbols, try again!!\n";
  // } while (alphabet.size() < 3);

  
  // // Printing the alphabet
  // cout << "\nThis is your alphabet\n\n";
  // printSet(alphabet);

  // // Request strings w1 & w2 to the user and validate them
  // w1 = validateString(alphabet);
  // w2 = validateString(alphabet);

  // cout << "\nThese are your words: \n";
  // cout << w1 << endl << w2 << endl;

  // // Checking if w1 is prefix or sufix of w2
  // if(isPrefixOf(w1, w2)) 
  //   cout << "\nThe word " << w1 << " is prefix of " << w2 << endl;
  // else if(isSuffixOf(w1, w2))
  //   cout << "\nThe word " << w1 << " is suffix of " << w2 << endl;
  // else
  //   cout << "\nThe word " << w1 << " is NOT prefix either suffix of " << w2 << endl;

  // // Checking if w1 is substring of w2
  // if(isSubstringOf(w1, w2)) cout << "\nThe word " << w1 << " is a substring of " << w2 << endl;
  // else cout << "\nThe word " << w1 << " is NOT a substring of " << w2 << endl;

  // // Cheking if w1 is subsequence of w2
  // if(isSubsequenceOf(w1, w2)) cout << "\nThe word " << w1 << " is a subsequence of " << w2 << endl;
  // else cout << "\nThe word " << w1 << " is NOT a subsequence of " << w2 << endl;

  // // Generate and displaying languagues L1 and L2
  // cout << "\nBased on the alphabet that you defined previously, let's create some languages\n";
  // set<string> L1 = createNewLanguage(alphabet);
  // cout << "Language 1: \n";
  // printSet(L1); 

  // set<string> L2 = createNewLanguage(alphabet);
  // cout << "Language 2: \n";
  // printSet(L2);

  // cout << "\nThe Language generated by the difference between the generated languages previously is: \n";
  // printSet(differenceBetween(L1, L2));

  // cout << "\nPowering your alphabet'\n";
  // printSet(alphabetPow(alphabet));

  string exp; 
  int continueEvaluate = 1;
  cout << "Let's evaluate some strings according with the next conditions.";
  cout << "\n--Every digit string with at least one repeated digit. The order doesn't matter. The string must have a length greater than 5\n";
  while (continueEvaluate == 1){
    cout << "Write the string you want to evaluate\n"; cin >>exp;
    if(regularExpresion(exp)) 
      cout << "\n***Valid string***\n";
    else
      cout << "\nInvalid string!!!";
    cout << "\nIf you want to evaluate another string, press 1. Otherwise, press any other key\n";
    cin >> continueEvaluate;
  }
  
  return 0;
}

set<string> readAlphabet(int option, set<string> alphabet){
  // Enter the alphabet one by one
  if (option == 1){
    string symbol = "";
    cout << "\n--Write at least 3 symbols\n";
    cout << "--Press enter after each symbol\n";
    cout << "--Write 'end' to finish\n";

    cin >> symbol;
    while (symbol != "end"){
      alphabet.insert(symbol);
      cin >> symbol;
    }
  }

  // Enter the alphabet in a range
  else if (option == 2){
    string range = "";
    cout << "\n--Write the range in the next format:\n";
    cout << "--symbol-symbol (two symbols, separeted by a hypen without any space). e.g A-Z\n";
    cout << "--The alphabet will be created based on the ascci code\n";
    cout << "--The range length must be greater than 3\n";

    cin >> range;
    // Prevent errors
    // --Wrong format
    // --Less than 3 elements in the range
    while (range.size() != 3 || abs(range[0] - range[2]) < 2){
      if (range.size() < 3)
        cout << "Format error. Try again!!\n";
      else
        cout << "Range too short. Try again!!\n";

      cin >> range;
    }

    if (range[0] > range[2]){
      char tmp = range[0];
      range[0] = range[2];
      range[2] = tmp;
    }

    string aux;
    for (char i = range[0]; i <= range[2]; i++){
      aux = i;
      alphabet.insert(aux);
    }
  }

  else cout << "Invalid option\n";
    
  return alphabet;
}

string validateString(const set<string>& alphabet){
  bool invalidString;
  string word;

  cout << "Insert a new word\n";
  do{
    // Reset validation to false in every new attemp
    invalidString = false;
    cin >> word;
    for(int i = 0; i < word.size(); i++){
      // Some symbol was not found
      if(alphabet.find(string(1,word[i])) == alphabet.end()){
        invalidString = true;
        cout << "\nInvalid word!!. The symbol [" << word[i] << "] was not found!\n";
        cout << "Try again!!\n";
        break;
      }
    }
  }while(invalidString);

  return word; 
}

template <class T> 
void printSet(const T& s){
  for (auto it : s)
    cout << it << " ";
  cout << endl; 
}

bool isPrefixOf(string w1, string w2){
  if(w1.size() > w2.size())
    return false;

  if(w1.size() == w2.size()) 
    return (w1 == w2)? true : false;
  
  w2.pop_back();
  return isPrefixOf(w1, w2);
}

bool isSuffixOf(string w1, string w2){
  if(w1.size() > w2.size())
    return false;

  if(w1.size() == w2.size())
    return (w1 == w2)? true : false;
  
  w2.erase(w2.begin());
  return isSuffixOf(w1, w2);
}

bool isSubstringOf(string w1, string w2){
  return (w2.find(w1) != string::npos)? true : false;
} 

bool isSubsequenceOf(string w1, string w2){
  if(w1.size() > w2.size()) return false;

  int i = 0, j = 0;
  while(i < w1.size()){
    if(j >= w2.size()) return false;
    if(w1[i] == w2[j]) i++, j++;
    else j++;
  }
  
  return true;
}

string createNewWord(int length, const set<string>& alphabet){
  string word = "";

  for(int i = 0; i < length; i++){
    auto it = alphabet.begin();
    int random = rand() % alphabet.size();
    advance(it, random); 
    word = word + *it;
  }

  return word;
}

set<string> createNewLanguage(const set<string>& alphabet){
  int wordsCounter, wordLength;
  set<string> language;
  string word;

  cout << "How many words would you like to have in your language?: "; cin >> wordsCounter;
  cout << "What will be the length of the words?: "; cin >> wordLength;
  
  // Prevent cases where the user might try to generate more words than possibles, setting the language max length to 200
  int maxPossibilities = 1;
  for(int i = 0; i < wordLength; i++){
    maxPossibilities *= alphabet.size();
    if(maxPossibilities > 200) break;
  }
  if(wordsCounter > maxPossibilities){
    cout << "\nWith the provided data, it's NOT possible to generate all those words.\n";
    if(maxPossibilities > 200){
      cout <<"\nI'll generate only 200 words\n";
      wordsCounter =  200;
    }else{
      cout <<"\nI'll generate all the possibilities\n";
      wordsCounter = maxPossibilities;
    }
  }

  while (language.size() < wordsCounter){
    word = createNewWord(wordLength, alphabet);
    language.insert(word);
  }

  return language;
}

set<string> differenceBetween(const set<string>& L1, const set<string>& L2){
  set<string> L0;

  // Another way to find the difference with a STL function
  // L0 = set_difference(L1.begin(), L1.end(), L2.begin(), L2.end());

  for(auto it: L1){
    if(L2.find(it) != L2.end()) continue;
    L0.insert(it);
  }

  return L0;
}

vector<string> alphabetPow(const set<string>& alphabet){
  vector<string> poweredAlphabet;
  int pow;

  do{
    cout << "How many times do you want to power your alphabet?: "; cin >> pow;
    if(pow > 5 || pow < -5)
      cout << "Out of range!! Try again picking a number between [-5, 5]";
  }while(pow > 5 || pow < -5);

  if(pow > 0)
    for(int i = 0; i < pow; i++)
      for(auto it: alphabet)
        poweredAlphabet.push_back(it);
  
  else{
    set<string, greater<string>> aux;
    aux.insert(alphabet.begin(), alphabet.end());
    for(int i = 0; i < abs(pow); i++)
      for(auto it: aux)
      poweredAlphabet.push_back(it);
  }

  return poweredAlphabet;
}

bool regularExpresion(string exp){
  regex pattern("^((\\d*0\\d*0\\d*)?|(\\d*1\\d*1\\d*)?|(\\d*2\\d*2\\d*)?|(\\d*3\\d*3\\d*)?|(\\d*4\\d*4\\d*)?|(\\d*5\\d*5\\d*)?|(\\d*6\\d*6\\d*)?|(\\d*7\\d*7\\d*)?|(\\d*8\\d*8\\d*)?|(\\d*9\\d*9\\d*)?){5,}$");
  
  return regex_match(exp, pattern);
}
